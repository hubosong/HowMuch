++ = FEITO
-  = FALTA FAZER
-- = FALTA FAZER PRIORITÁRIO

Falta fazer:
    -- Problema a ser resolvido: Supondo que existam dois produtos, ambos sem código de barra, a "Cerveja Boa Tarde" e o "Cereal Boa Manhã", e que existem dois mercados, M1 e M2.
        M1 vende apenas a cerveja, e no cupom a cadastra como "CER BOA" e M2 vende apenas o cereal também como "CER BOA". Como distinguir entre estes produtos na hora de comparar os preços nos mercados?

    ++ Definir nome e domínio do app
    
    	-- Remover TODOS os adapters
	-- Criar tela para atualizar dados de cadastro de usuário (município, endereço etc...).
	-- Quando for excluir lista de compras, pedir confirmação.
	-- Ao ver NFe, quando clicar em um produto ir para a tela do "VerProduto"...
	-- Na tela de Descontos, ajustar para 2 o número de casas decimais dos valores
	-- Criar um "Map_Utils" que tenha uma função que calcula as distâncias entre dois pontos (A classe Mercado agora tem "latitude" e "longitude"). Também verificar se é possível pegar a latitude/longitude a partir de um endereço.
	-- Colocar as animações de espera durante a execução dos AsynTasks 
	-- Achar um lugar para o botão de ordenar no "Criar Lista" (pra ordenar os itens da lista), "Minhas NFes" (pra ordenars as nfes) e "Minhas Listas" (pra ordenar as listas)
	-- No "Comparar listas" deve ser possível comparar as listas também pela distância do ponto atual (pegar o ponto atual do gps do celular) até os mercados.
	-- Em "Detalhes do produto" informar também a distância até o mercado
	-- No criar lista, ao pesquisar um produto, precisa tirar a busca em tempo real (a medida que se vai escrevendo), e colocar um botão "Pesquisar" ou com uma lupa, o qual dispara a busca.
	
	IMPORTANTÍSSIMO:
	-- Fazer a busca por descontos apenas uma vez (da pra fazer enquanto exibe o splash screen), e armazená-los no celular. Se 30 minutos desde a ultima requisição o usuario clicar em Descontos novamente, pode ser feita outra requisição. Para isso, acho válido usar o banco de dados do próprio app (na pasta assets tem o arquivo "database.db", que é um banco de dados em sqlite e pode ser aberto/modificado com o SQLiteStudio (para windows e unix). Já tem quase toda parte de interface criada (conexão, daos, etc...) no próprio app, então falta bem pouca coisa.
	    -- Fazer o mesmo para NFes e Listas, isto é, armazenar no app e só atualizar quando a busca ocorrer em intervalos maiores que 30 minutos.
	    




    ++ Opção de informar o código da nota manualmente (as vezes o qrcode sai mal impresso)
    ++ colocar de volta a animação de espera quando realiza uma asynctask
    ++ colocar valor total da nota fiscal no lugar do codigo qr
    ++ nova lista adicionar produto pegar xml o layout
    ++ Icones de launcher OK
    ++ Em "Descontos", ao lado do Edittext de pesquisar, criar um botão para ordenar a lista. Quando clica no botão abre um dialog perguntando o critério (menor/maior preço, data, mercado etc..)
    ++ Ver o layout da activity de descrição/histórico de um produto (caminho: Descontos->clicar em um produto->ver detalhes/histórico de preços)
        ++ Em cada item colocar também a data. Por exemplo, "Menor valor Registrado, Preço X, Mercado Y, Data Z".
        ++ Em "Propriedades do produto", colocar o restante das informações do produto.
    ++ O app deve perguntar para sair ao clicar voltar ("Pressione novamente para sair") quando estiver em uma das telas do menu (Descontos, Criar Lista, Minhas Listas, Minhas NFes...).
        ++ Nas demais telas (Ver Mercado, Ver Produto, Comparar Lista...) o botão voltar deve voltar para a tela anterior.
        ++ Com o menu principal aberto, o botão de voltar deve fechar o menu.
    ++ Em "Criar Lista", colocar um campo de quantidade do produto selecionado
    ++ Em "Criar Lista", colocar botões com lixeira, para retirar os produtos da lista;
    ++ Implementar a exclusão de Listas
    ++ Implementar a exclusão de NFes
    ++ Mecanismo que, ao ocorrer falha no envio de uma nota (por qualquer motivo) guarde a chave da nota e tente enviar mais tarde.
    ++ Se possível, colocar uma informação durante a leitura do QRcorde e do código de barras dos produtos (talvez uma barra com "Ler QRCode de Nota Fiscal" ou algo assim)
        ++ Criar aplicação para "igualar" o id_produto de produtos entre mercados. (Foi feito no servidor, arquivo: telas.ProdutosDuplicados.java)
        ++ Fluxo inserção de produto no servidor:
            ++ SE não tiver EAN, precisa verificar se a descrição
        ++ Na activity "Descontos", colocar um botão que pesquisa um produto pelo código de barra usando a camera.
    	++ Criar um adapter para mostrar os itens de uma NFe na activity "VerNFe"
    	++ Arrumar os adapters que mostram os objetos nas activities "Minhas NFes" e "Minhas Listas"
    	++ Possibilitar dar nome para a lista de compras;
    	++ Na activity que mostra as listas de compras, aparecer a opção de "Comparar em Mercados"
    	++ Criar a activity que vai mostrar o comparativo da lista de compras nos mercados
    	++ NFs lidas nao estao aparecendo na lista de nfs (Acredito que esteja consertado. Havia um problema no servidor durante o cadastro de algumas notas. Tente cadastrá-las novamente).



Antes de lançar:
    - Verificar se não tem nada digitado errado
	- Certificado SSL
	- Criar servidor de email (só é possível com o domínio já em mãos), para enviar email de confirmação quando o usuário se cadastra.
	- Rodar no NO_PARTIAL_GROUP (MYSQL)
	- Redundância para enviar NFe
		- Sincronização
    - Testar exaustivamente na maior variedade de dispositivos possível
    - Site?
    - iOS?

Ideias para Versão 1.0:
	+++ Cadastrar nota
	--- Mostrar produtos com grandes descontos
		--- Calculado na variação do preço médio
	- Criar lista de compras
		- Mostrar no mapa os mercados mais próximos com o preço de cada um deles para uma lista
		- Comparar o total da lista nos mercados
		- Ao selecionar um mercado a partir da lista, mostrar o preço de cada produto
	- Ver listas anteriores/modificar
	- Ver NFes anteriores e transformar em lista
	- Preferências
	- Rever Cadastro de Usuário

Versão 2.0:
    - Adicionar filtros nas pesquisas sql para retornar apenas resultados da cidade do usuário
    - A cada X notas cadastradas terá direito a Y alertas de produtos.
    - Servidor em PHP
    - JSON ao invés de tipos próprios do JAVA
	- Histórico com gráficos
		- Preço médio
		- Maior/Menor preço atual e histórico
		- Preço histórico em cada mercado
	- Mostrar Mercados e mapas de localização.
	- Alertas Definidos pelo Usuário (por exemplo, quando um produto aparecer em um mercado por menos de X reais)
	- Controle das finanças (quanto gastei em cada mercado, mês/dia, gastos médios, por grupo de produtos...)

